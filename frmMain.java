/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mine.sweeper;

import java.awt.Color;

/**
 *
 * @author hirom
 */
public class frmMain extends javax.swing.JFrame {
    
    

    /**
     * Creates new form frmMain
     */
    public frmMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        b0 = new java.awt.Button();
        b1 = new java.awt.Button();
        b2 = new java.awt.Button();
        b3 = new java.awt.Button();
        b4 = new java.awt.Button();
        b5 = new java.awt.Button();
        b6 = new java.awt.Button();
        b7 = new java.awt.Button();
        b8 = new java.awt.Button();
        b9 = new java.awt.Button();
        b10 = new java.awt.Button();
        b11 = new java.awt.Button();
        b12 = new java.awt.Button();
        b13 = new java.awt.Button();
        b14 = new java.awt.Button();
        b15 = new java.awt.Button();
        b16 = new java.awt.Button();
        b17 = new java.awt.Button();
        b18 = new java.awt.Button();
        b19 = new java.awt.Button();
        b20 = new java.awt.Button();
        b21 = new java.awt.Button();
        b22 = new java.awt.Button();
        b23 = new java.awt.Button();
        b24 = new java.awt.Button();
        b25 = new java.awt.Button();
        b26 = new java.awt.Button();
        b27 = new java.awt.Button();
        b28 = new java.awt.Button();
        b29 = new java.awt.Button();
        b30 = new java.awt.Button();
        b31 = new java.awt.Button();
        b32 = new java.awt.Button();
        b33 = new java.awt.Button();
        b34 = new java.awt.Button();
        b35 = new java.awt.Button();
        b36 = new java.awt.Button();
        b37 = new java.awt.Button();
        b38 = new java.awt.Button();
        b39 = new java.awt.Button();
        b40 = new java.awt.Button();
        b41 = new java.awt.Button();
        b42 = new java.awt.Button();
        b43 = new java.awt.Button();
        b44 = new java.awt.Button();
        b45 = new java.awt.Button();
        b46 = new java.awt.Button();
        b47 = new java.awt.Button();
        b48 = new java.awt.Button();
        b49 = new java.awt.Button();
        b50 = new java.awt.Button();
        b51 = new java.awt.Button();
        b52 = new java.awt.Button();
        b53 = new java.awt.Button();
        b54 = new java.awt.Button();
        b55 = new java.awt.Button();
        b56 = new java.awt.Button();
        b57 = new java.awt.Button();
        b58 = new java.awt.Button();
        b59 = new java.awt.Button();
        b60 = new java.awt.Button();
        b61 = new java.awt.Button();
        b62 = new java.awt.Button();
        b63 = new java.awt.Button();
        b64 = new java.awt.Button();
        b65 = new java.awt.Button();
        b66 = new java.awt.Button();
        b67 = new java.awt.Button();
        b68 = new java.awt.Button();
        b69 = new java.awt.Button();
        b70 = new java.awt.Button();
        b71 = new java.awt.Button();
        b72 = new java.awt.Button();
        b73 = new java.awt.Button();
        b74 = new java.awt.Button();
        b75 = new java.awt.Button();
        b76 = new java.awt.Button();
        b77 = new java.awt.Button();
        b78 = new java.awt.Button();
        b79 = new java.awt.Button();
        b80 = new java.awt.Button();
        b81 = new java.awt.Button();
        b82 = new java.awt.Button();
        b83 = new java.awt.Button();
        b84 = new java.awt.Button();
        b85 = new java.awt.Button();
        b86 = new java.awt.Button();
        b87 = new java.awt.Button();
        b88 = new java.awt.Button();
        b89 = new java.awt.Button();
        b90 = new java.awt.Button();
        b91 = new java.awt.Button();
        b92 = new java.awt.Button();
        b93 = new java.awt.Button();
        b94 = new java.awt.Button();
        b95 = new java.awt.Button();
        b96 = new java.awt.Button();
        b97 = new java.awt.Button();
        b98 = new java.awt.Button();
        b99 = new java.awt.Button();
        btnReset = new javax.swing.JButton();
        flagToggle = new javax.swing.JCheckBox();
        lblMessage = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblInstruction1 = new javax.swing.JLabel();
        lblInstruction2 = new javax.swing.JLabel();
        lblInstruction3 = new javax.swing.JLabel();
        lblInstruction4 = new javax.swing.JLabel();
        lblInstruction5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        b0.setBackground(new java.awt.Color(153, 153, 153));
        b0.setEnabled(false);
        b0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b0ActionPerformed(evt);
            }
        });

        b1.setBackground(new java.awt.Color(153, 153, 153));
        b1.setEnabled(false);
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        b2.setBackground(new java.awt.Color(153, 153, 153));
        b2.setEnabled(false);
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b3.setBackground(new java.awt.Color(153, 153, 153));
        b3.setEnabled(false);
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        b4.setBackground(new java.awt.Color(153, 153, 153));
        b4.setEnabled(false);
        b4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b4ActionPerformed(evt);
            }
        });

        b5.setBackground(new java.awt.Color(153, 153, 153));
        b5.setEnabled(false);
        b5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b5ActionPerformed(evt);
            }
        });

        b6.setBackground(new java.awt.Color(153, 153, 153));
        b6.setEnabled(false);
        b6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });

        b7.setBackground(new java.awt.Color(153, 153, 153));
        b7.setEnabled(false);
        b7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b7ActionPerformed(evt);
            }
        });

        b8.setBackground(new java.awt.Color(153, 153, 153));
        b8.setEnabled(false);
        b8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b8ActionPerformed(evt);
            }
        });

        b9.setBackground(new java.awt.Color(153, 153, 153));
        b9.setEnabled(false);
        b9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b9ActionPerformed(evt);
            }
        });

        b10.setBackground(new java.awt.Color(153, 153, 153));
        b10.setEnabled(false);
        b10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b10ActionPerformed(evt);
            }
        });

        b11.setBackground(new java.awt.Color(153, 153, 153));
        b11.setEnabled(false);
        b11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b11ActionPerformed(evt);
            }
        });

        b12.setBackground(new java.awt.Color(153, 153, 153));
        b12.setEnabled(false);
        b12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b12ActionPerformed(evt);
            }
        });

        b13.setBackground(new java.awt.Color(153, 153, 153));
        b13.setEnabled(false);
        b13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b13ActionPerformed(evt);
            }
        });

        b14.setBackground(new java.awt.Color(153, 153, 153));
        b14.setEnabled(false);
        b14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b14ActionPerformed(evt);
            }
        });

        b15.setBackground(new java.awt.Color(153, 153, 153));
        b15.setEnabled(false);
        b15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b15ActionPerformed(evt);
            }
        });

        b16.setBackground(new java.awt.Color(153, 153, 153));
        b16.setEnabled(false);
        b16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b16ActionPerformed(evt);
            }
        });

        b17.setBackground(new java.awt.Color(153, 153, 153));
        b17.setEnabled(false);
        b17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b17ActionPerformed(evt);
            }
        });

        b18.setBackground(new java.awt.Color(153, 153, 153));
        b18.setEnabled(false);
        b18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b18ActionPerformed(evt);
            }
        });

        b19.setBackground(new java.awt.Color(153, 153, 153));
        b19.setEnabled(false);
        b19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b19ActionPerformed(evt);
            }
        });

        b20.setBackground(new java.awt.Color(153, 153, 153));
        b20.setEnabled(false);
        b20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b20ActionPerformed(evt);
            }
        });

        b21.setBackground(new java.awt.Color(153, 153, 153));
        b21.setEnabled(false);
        b21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b21ActionPerformed(evt);
            }
        });

        b22.setBackground(new java.awt.Color(153, 153, 153));
        b22.setEnabled(false);
        b22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b22ActionPerformed(evt);
            }
        });

        b23.setBackground(new java.awt.Color(153, 153, 153));
        b23.setEnabled(false);
        b23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b23ActionPerformed(evt);
            }
        });

        b24.setBackground(new java.awt.Color(153, 153, 153));
        b24.setEnabled(false);
        b24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b24ActionPerformed(evt);
            }
        });

        b25.setBackground(new java.awt.Color(153, 153, 153));
        b25.setEnabled(false);
        b25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b25ActionPerformed(evt);
            }
        });

        b26.setBackground(new java.awt.Color(153, 153, 153));
        b26.setEnabled(false);
        b26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b26ActionPerformed(evt);
            }
        });

        b27.setBackground(new java.awt.Color(153, 153, 153));
        b27.setEnabled(false);
        b27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b27ActionPerformed(evt);
            }
        });

        b28.setBackground(new java.awt.Color(153, 153, 153));
        b28.setEnabled(false);
        b28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b28ActionPerformed(evt);
            }
        });

        b29.setBackground(new java.awt.Color(153, 153, 153));
        b29.setEnabled(false);
        b29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b29ActionPerformed(evt);
            }
        });

        b30.setBackground(new java.awt.Color(153, 153, 153));
        b30.setEnabled(false);
        b30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b30ActionPerformed(evt);
            }
        });

        b31.setBackground(new java.awt.Color(153, 153, 153));
        b31.setEnabled(false);
        b31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b31ActionPerformed(evt);
            }
        });

        b32.setBackground(new java.awt.Color(153, 153, 153));
        b32.setEnabled(false);
        b32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b32ActionPerformed(evt);
            }
        });

        b33.setBackground(new java.awt.Color(153, 153, 153));
        b33.setEnabled(false);
        b33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b33ActionPerformed(evt);
            }
        });

        b34.setBackground(new java.awt.Color(153, 153, 153));
        b34.setEnabled(false);
        b34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b34ActionPerformed(evt);
            }
        });

        b35.setBackground(new java.awt.Color(153, 153, 153));
        b35.setEnabled(false);
        b35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b35ActionPerformed(evt);
            }
        });

        b36.setBackground(new java.awt.Color(153, 153, 153));
        b36.setEnabled(false);
        b36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b36ActionPerformed(evt);
            }
        });

        b37.setBackground(new java.awt.Color(153, 153, 153));
        b37.setEnabled(false);
        b37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b37ActionPerformed(evt);
            }
        });

        b38.setBackground(new java.awt.Color(153, 153, 153));
        b38.setEnabled(false);
        b38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b38ActionPerformed(evt);
            }
        });

        b39.setBackground(new java.awt.Color(153, 153, 153));
        b39.setEnabled(false);
        b39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b39ActionPerformed(evt);
            }
        });

        b40.setBackground(new java.awt.Color(153, 153, 153));
        b40.setEnabled(false);
        b40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b40ActionPerformed(evt);
            }
        });

        b41.setBackground(new java.awt.Color(153, 153, 153));
        b41.setEnabled(false);
        b41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b41ActionPerformed(evt);
            }
        });

        b42.setBackground(new java.awt.Color(153, 153, 153));
        b42.setEnabled(false);
        b42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b42ActionPerformed(evt);
            }
        });

        b43.setBackground(new java.awt.Color(153, 153, 153));
        b43.setEnabled(false);
        b43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b43ActionPerformed(evt);
            }
        });

        b44.setBackground(new java.awt.Color(153, 153, 153));
        b44.setEnabled(false);
        b44.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b44ActionPerformed(evt);
            }
        });

        b45.setBackground(new java.awt.Color(153, 153, 153));
        b45.setEnabled(false);
        b45.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b45ActionPerformed(evt);
            }
        });

        b46.setBackground(new java.awt.Color(153, 153, 153));
        b46.setEnabled(false);
        b46.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b46ActionPerformed(evt);
            }
        });

        b47.setBackground(new java.awt.Color(153, 153, 153));
        b47.setEnabled(false);
        b47.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b47ActionPerformed(evt);
            }
        });

        b48.setBackground(new java.awt.Color(153, 153, 153));
        b48.setEnabled(false);
        b48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b48ActionPerformed(evt);
            }
        });

        b49.setBackground(new java.awt.Color(153, 153, 153));
        b49.setEnabled(false);
        b49.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b49ActionPerformed(evt);
            }
        });

        b50.setBackground(new java.awt.Color(153, 153, 153));
        b50.setEnabled(false);
        b50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b50ActionPerformed(evt);
            }
        });

        b51.setBackground(new java.awt.Color(153, 153, 153));
        b51.setEnabled(false);
        b51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b51ActionPerformed(evt);
            }
        });

        b52.setBackground(new java.awt.Color(153, 153, 153));
        b52.setEnabled(false);
        b52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b52ActionPerformed(evt);
            }
        });

        b53.setBackground(new java.awt.Color(153, 153, 153));
        b53.setEnabled(false);
        b53.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b53ActionPerformed(evt);
            }
        });

        b54.setBackground(new java.awt.Color(153, 153, 153));
        b54.setEnabled(false);
        b54.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b54ActionPerformed(evt);
            }
        });

        b55.setBackground(new java.awt.Color(153, 153, 153));
        b55.setEnabled(false);
        b55.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b55ActionPerformed(evt);
            }
        });

        b56.setBackground(new java.awt.Color(153, 153, 153));
        b56.setEnabled(false);
        b56.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b56ActionPerformed(evt);
            }
        });

        b57.setBackground(new java.awt.Color(153, 153, 153));
        b57.setEnabled(false);
        b57.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b57ActionPerformed(evt);
            }
        });

        b58.setBackground(new java.awt.Color(153, 153, 153));
        b58.setEnabled(false);
        b58.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b58ActionPerformed(evt);
            }
        });

        b59.setBackground(new java.awt.Color(153, 153, 153));
        b59.setEnabled(false);
        b59.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b59ActionPerformed(evt);
            }
        });

        b60.setBackground(new java.awt.Color(153, 153, 153));
        b60.setEnabled(false);
        b60.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b60ActionPerformed(evt);
            }
        });

        b61.setBackground(new java.awt.Color(153, 153, 153));
        b61.setEnabled(false);
        b61.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b61ActionPerformed(evt);
            }
        });

        b62.setBackground(new java.awt.Color(153, 153, 153));
        b62.setEnabled(false);
        b62.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b62ActionPerformed(evt);
            }
        });

        b63.setBackground(new java.awt.Color(153, 153, 153));
        b63.setEnabled(false);
        b63.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b63ActionPerformed(evt);
            }
        });

        b64.setBackground(new java.awt.Color(153, 153, 153));
        b64.setEnabled(false);
        b64.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b64ActionPerformed(evt);
            }
        });

        b65.setBackground(new java.awt.Color(153, 153, 153));
        b65.setEnabled(false);
        b65.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b65ActionPerformed(evt);
            }
        });

        b66.setBackground(new java.awt.Color(153, 153, 153));
        b66.setEnabled(false);
        b66.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b66ActionPerformed(evt);
            }
        });

        b67.setBackground(new java.awt.Color(153, 153, 153));
        b67.setEnabled(false);
        b67.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b67ActionPerformed(evt);
            }
        });

        b68.setBackground(new java.awt.Color(153, 153, 153));
        b68.setEnabled(false);
        b68.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b68ActionPerformed(evt);
            }
        });

        b69.setBackground(new java.awt.Color(153, 153, 153));
        b69.setEnabled(false);
        b69.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b69ActionPerformed(evt);
            }
        });

        b70.setBackground(new java.awt.Color(153, 153, 153));
        b70.setEnabled(false);
        b70.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b70ActionPerformed(evt);
            }
        });

        b71.setBackground(new java.awt.Color(153, 153, 153));
        b71.setEnabled(false);
        b71.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b71ActionPerformed(evt);
            }
        });

        b72.setBackground(new java.awt.Color(153, 153, 153));
        b72.setEnabled(false);
        b72.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b72ActionPerformed(evt);
            }
        });

        b73.setBackground(new java.awt.Color(153, 153, 153));
        b73.setEnabled(false);
        b73.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b73ActionPerformed(evt);
            }
        });

        b74.setBackground(new java.awt.Color(153, 153, 153));
        b74.setEnabled(false);
        b74.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b74ActionPerformed(evt);
            }
        });

        b75.setBackground(new java.awt.Color(153, 153, 153));
        b75.setEnabled(false);
        b75.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b75ActionPerformed(evt);
            }
        });

        b76.setBackground(new java.awt.Color(153, 153, 153));
        b76.setEnabled(false);
        b76.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b76ActionPerformed(evt);
            }
        });

        b77.setBackground(new java.awt.Color(153, 153, 153));
        b77.setEnabled(false);
        b77.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b77ActionPerformed(evt);
            }
        });

        b78.setBackground(new java.awt.Color(153, 153, 153));
        b78.setEnabled(false);
        b78.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b78ActionPerformed(evt);
            }
        });

        b79.setBackground(new java.awt.Color(153, 153, 153));
        b79.setEnabled(false);
        b79.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b79ActionPerformed(evt);
            }
        });

        b80.setBackground(new java.awt.Color(153, 153, 153));
        b80.setEnabled(false);
        b80.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b80ActionPerformed(evt);
            }
        });

        b81.setBackground(new java.awt.Color(153, 153, 153));
        b81.setEnabled(false);
        b81.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b81ActionPerformed(evt);
            }
        });

        b82.setBackground(new java.awt.Color(153, 153, 153));
        b82.setEnabled(false);
        b82.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b82ActionPerformed(evt);
            }
        });

        b83.setBackground(new java.awt.Color(153, 153, 153));
        b83.setEnabled(false);
        b83.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b83ActionPerformed(evt);
            }
        });

        b84.setBackground(new java.awt.Color(153, 153, 153));
        b84.setEnabled(false);
        b84.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b84ActionPerformed(evt);
            }
        });

        b85.setBackground(new java.awt.Color(153, 153, 153));
        b85.setEnabled(false);
        b85.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b85ActionPerformed(evt);
            }
        });

        b86.setBackground(new java.awt.Color(153, 153, 153));
        b86.setEnabled(false);
        b86.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b86ActionPerformed(evt);
            }
        });

        b87.setBackground(new java.awt.Color(153, 153, 153));
        b87.setEnabled(false);
        b87.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b87ActionPerformed(evt);
            }
        });

        b88.setBackground(new java.awt.Color(153, 153, 153));
        b88.setEnabled(false);
        b88.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b88ActionPerformed(evt);
            }
        });

        b89.setBackground(new java.awt.Color(153, 153, 153));
        b89.setEnabled(false);
        b89.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b89ActionPerformed(evt);
            }
        });

        b90.setBackground(new java.awt.Color(153, 153, 153));
        b90.setEnabled(false);
        b90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b90ActionPerformed(evt);
            }
        });

        b91.setBackground(new java.awt.Color(153, 153, 153));
        b91.setEnabled(false);
        b91.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b91ActionPerformed(evt);
            }
        });

        b92.setBackground(new java.awt.Color(153, 153, 153));
        b92.setEnabled(false);
        b92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b92ActionPerformed(evt);
            }
        });

        b93.setBackground(new java.awt.Color(153, 153, 153));
        b93.setEnabled(false);
        b93.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b93ActionPerformed(evt);
            }
        });

        b94.setBackground(new java.awt.Color(153, 153, 153));
        b94.setEnabled(false);
        b94.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b94ActionPerformed(evt);
            }
        });

        b95.setBackground(new java.awt.Color(153, 153, 153));
        b95.setEnabled(false);
        b95.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b95ActionPerformed(evt);
            }
        });

        b96.setBackground(new java.awt.Color(153, 153, 153));
        b96.setEnabled(false);
        b96.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b96ActionPerformed(evt);
            }
        });

        b97.setBackground(new java.awt.Color(153, 153, 153));
        b97.setEnabled(false);
        b97.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b97ActionPerformed(evt);
            }
        });

        b98.setBackground(new java.awt.Color(153, 153, 153));
        b98.setEnabled(false);
        b98.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b98ActionPerformed(evt);
            }
        });

        b99.setBackground(new java.awt.Color(153, 153, 153));
        b99.setEnabled(false);
        b99.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b99ActionPerformed(evt);
            }
        });

        btnReset.setText("Start Game");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        flagToggle.setText("Toggle Flags");
        flagToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flagToggleActionPerformed(evt);
            }
        });

        lblMessage.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        lblMessage.setText("Find all the mines!");

        jLabel2.setFont(new java.awt.Font("Stencil", 1, 48)); // NOI18N
        jLabel2.setText("Mine Sweeper");

        lblInstruction1.setText("Instructions:");

        lblInstruction2.setText("Clear the minefield and flag all the bombs.");

        lblInstruction3.setText("The number indicated in a given square is ");

        lblInstruction4.setText("equal to the number of bombs surrounding it!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(btnReset)
                        .addGap(44, 44, 44)
                        .addComponent(flagToggle))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b20, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b21, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b22, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b23, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b24, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b25, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b26, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b27, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b28, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b29, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b30, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b31, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b32, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b33, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b34, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b35, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b36, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b37, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b38, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b39, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b40, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b41, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b42, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b43, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b44, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b45, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b46, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b47, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b48, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b49, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b50, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b51, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b52, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b53, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b54, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b55, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b56, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b57, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b58, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b59, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b60, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b61, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b62, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b63, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b64, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b65, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b66, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b67, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b68, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b69, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b70, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b71, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b72, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b73, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b74, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b75, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b76, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b77, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b78, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b79, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b80, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b81, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b82, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b83, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b84, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b85, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b86, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b87, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b88, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b89, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b90, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b91, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b92, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b93, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b94, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b95, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b96, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b97, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b98, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b99, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(b10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b0, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(b11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b13, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b14, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b15, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b16, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b17, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b18, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(b7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(b9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b19, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(48, 48, 48)
                        .addComponent(lblInstruction5)))
                .addContainerGap(273, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInstruction4)
                    .addComponent(lblInstruction1)
                    .addComponent(lblInstruction2)
                    .addComponent(lblInstruction3))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblInstruction1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblInstruction2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblInstruction3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblInstruction4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnReset)
                            .addComponent(flagToggle))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(b1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(b19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(b29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(b39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(b49, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b48, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b47, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b46, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(b59, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b58, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b57, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b56, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b55, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b54, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b53, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b52, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b51, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b50, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(b69, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b68, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b67, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b66, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b65, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b64, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b63, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b62, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b61, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b60, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(b79, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b78, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b77, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b76, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b75, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b74, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b73, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b72, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b71, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b70, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(b89, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b88, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b87, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b86, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b85, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b84, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b83, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b82, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b81, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b80, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(b99, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b98, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b97, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b96, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b95, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b94, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b93, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b92, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b91, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b90, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(95, 95, 95)
                                        .addComponent(lblInstruction5))))
                            .addComponent(b9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addComponent(lblMessage)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // creating objects
    
    GameControl gc = new GameControl();
    
    
    private void b0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b0ActionPerformed
        
        //each button has this code which simply outputs the correct things when needed.
        
        int bNum = 0; //button identifier 
        
            
        if(!gc.flagToggled){ //this line determines whether the flag toggle check is on or not.
            
        if(gc.bombArray[bNum]){  //detects if the button is a bomb
            b0.setBackground(new Color(200,20,20));
            loseScreen(); //triggers a lose screen if it is.
        } 
        if(!gc.bombArray[bNum]){ //if there is no bomb, it will display the tile's value and make it a lighter colour.
  
            b0.setBackground(new Color(200,200,200));
            b0.setLabel(String.valueOf(gc.tileValue[bNum]));
            b0.setEnabled(false); //makes it unabled to be pressed twice.
            
            gc.selectedArray[bNum] = true; //sets the button as selected when pressed

        }        
        }else{ //if the flag toggle is on then when you press the button, it will be set as a flag.
            b0.setEnabled(true);
            if(!gc.flagArray[bNum]){ //sets it as a flag if it isn't a flag.

            b0.setBackground(new Color(20,200,20));
            b0.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else { //sets it as a normal tile if it's a flag
            b0.setLabel("");
            b0.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        
        //checks if the win condition has been met (if every bomb has been flagged correctly)
        
        gc.winCondition();
        
        if(gc.gameIsWon){
            winScreen();
        }


        //This code is found within the other 99 buttons.
        //There are only two other buttons which are different (reset and flagtoggle)
        //There are also methods found within the bottom of this file


        
                

        
    }//GEN-LAST:event_b0ActionPerformed

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        
        int bNum = 1; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b1.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b1.setBackground(new Color(200,200,200));
            b1.setLabel(String.valueOf(gc.tileValue[bNum]));
            b1.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b1.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b1.setBackground(new Color(20,200,20));
            b1.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b1.setLabel("");
            b1.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        
        gc.winCondition();
        
        if(gc.gameIsWon){
            winScreen();
        }
        
    }//GEN-LAST:event_b1ActionPerformed

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed

        int bNum = 2; //button identifier
        
            
        if(!gc.flagToggled){ 
        if(gc.bombArray[bNum]){  
            b2.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b2.setBackground(new Color(200,200,200));
            b2.setLabel(String.valueOf(gc.tileValue[bNum]));
            b2.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b2.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b2.setBackground(new Color(20,200,20));
            b2.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b2.setLabel("");
            b2.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b2ActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        
        //displays as "Reset" after first press
        
        btnReset.setText("Reset");
        
        //sets game start as true
        
        gc.gameIsStarted = true;
        gc.gameIsWon = false;
        
        //resets then generates a new board
        gc.reset();
        gc.generate();
        
        //resets tiles
        
        reset();
        
        
        
        
       
    }//GEN-LAST:event_btnResetActionPerformed

    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b3ActionPerformed
        int bNum = 3; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b3.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b3.setBackground(new Color(200,200,200));
            b3.setLabel(String.valueOf(gc.tileValue[bNum]));
            b3.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b3.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b3.setBackground(new Color(20,200,20));
            b3.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b3.setLabel("");
            b3.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }

    }//GEN-LAST:event_b3ActionPerformed

    private void flagToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flagToggleActionPerformed
      
        if(flagToggle.isSelected()){ //determines whether the flag toggle is on or not.
            gc.flagToggled = true;
        }else{
            gc.flagToggled = false;
        }
        
        
        
        //Makes sure that the tiles are unable to be pressed when they are flags and 
        //are able to be pressed while the flag toggle is on.
        if(gc.gameIsStarted){
        if(gc.flagArray[0] && !gc.flagToggled){
            b0.setEnabled(false);
        }if(gc.flagArray[0] && gc.flagToggled){
            b0.setEnabled(true);
            
        }
        
        if(gc.flagArray[1] && !gc.flagToggled){
            b1.setEnabled(false);
        }if(gc.flagArray[1] && gc.flagToggled){
            b1.setEnabled(true);
        }
        
        if(gc.flagArray[2] && !gc.flagToggled){
            b2.setEnabled(false);
        }if(gc.flagArray[2] && gc.flagToggled){
            b2.setEnabled(true);
        }
        
        if(gc.flagArray[3] && !gc.flagToggled){
            b3.setEnabled(false);
        }if(gc.flagArray[3] && gc.flagToggled){
            b3.setEnabled(true);
        }
        if(gc.flagArray[4] && !gc.flagToggled){
            b4.setEnabled(false);
        }if(gc.flagArray[4] && gc.flagToggled){
            b4.setEnabled(true);
        }
        
        if(gc.flagArray[5] && !gc.flagToggled){
            b5.setEnabled(false);
        }if(gc.flagArray[5] && gc.flagToggled){
            b5.setEnabled(true);
        }
        if(gc.flagArray[6] && !gc.flagToggled){
            b6.setEnabled(false);
        }if(gc.flagArray[6] && gc.flagToggled){
            b6.setEnabled(true);
        }
        
        if(gc.flagArray[7] && !gc.flagToggled){
            b7.setEnabled(false);
        }if(gc.flagArray[7] && gc.flagToggled){
            b7.setEnabled(true);
        }
        if(gc.flagArray[8] && !gc.flagToggled){
            b8.setEnabled(false);
        }if(gc.flagArray[8] && !gc.flagToggled){
            b8.setEnabled(true);
        }
        
        if(gc.flagArray[9] && !gc.flagToggled){
            b9.setEnabled(false);
        }if(gc.flagArray[9] && gc.flagToggled){
            b9.setEnabled(true);
        }
        if(gc.flagArray[10] && !gc.flagToggled){
            b10.setEnabled(false);
        }if(gc.flagArray[10] && gc.flagToggled){
            b10.setEnabled(true);
        }
        
        if(gc.flagArray[11] && !gc.flagToggled){
            b11.setEnabled(false);
        }if(gc.flagArray[11] && gc.flagToggled){
            b11.setEnabled(true);
        }
        
        if(gc.flagArray[12] && !gc.flagToggled){
            b12.setEnabled(false);
        }if(gc.flagArray[12] && gc.flagToggled){
            b12.setEnabled(true);
        }
        
        if(gc.flagArray[13] && !gc.flagToggled){
            b13.setEnabled(false);
        }if(gc.flagArray[13] && gc.flagToggled){
            b13.setEnabled(true);
        }
        if(gc.flagArray[14] && !gc.flagToggled){
            b14.setEnabled(false);
        }if(gc.flagArray[14] && gc.flagToggled){
            b14.setEnabled(true);
        }
        
        if(gc.flagArray[15] && !gc.flagToggled){
            b15.setEnabled(false);
        }if(gc.flagArray[15] && gc.flagToggled){
            b15.setEnabled(true);
        }
        if(gc.flagArray[16] && !gc.flagToggled){
            b16.setEnabled(false);
        }if(gc.flagArray[16] && gc.flagToggled){
            b16.setEnabled(true);
        }
        
        if(gc.flagArray[17] && !gc.flagToggled){
            b17.setEnabled(false);
        }if(gc.flagArray[17] && gc.flagToggled){
            b17.setEnabled(true);
        }
        if(gc.flagArray[18] && !gc.flagToggled){
            b18.setEnabled(false);
        }if(gc.flagArray[18] && gc.flagToggled){
            b18.setEnabled(true);
        }
        
        if(gc.flagArray[19] && !gc.flagToggled){
            b19.setEnabled(false);
        }if(gc.flagArray[19] && gc.flagToggled){
            b19.setEnabled(true);
        }if(gc.flagArray[20] && !gc.flagToggled){
            b20.setEnabled(false);
        }if(gc.flagArray[20] && gc.flagToggled){
            b20.setEnabled(true);
        }
        
        if(gc.flagArray[21] && !gc.flagToggled){
            b21.setEnabled(false);
        }if(gc.flagArray[21] && gc.flagToggled){
            b21.setEnabled(true);
        }
        
        if(gc.flagArray[22] && !gc.flagToggled){
            b22.setEnabled(false);
        }if(gc.flagArray[22] && gc.flagToggled){
            b22.setEnabled(true);
        }
        
        if(gc.flagArray[23] && !gc.flagToggled){
            b23.setEnabled(false);
        }if(gc.flagArray[23] && gc.flagToggled){
            b23.setEnabled(true);
        }
        if(gc.flagArray[24] && !gc.flagToggled){
            b24.setEnabled(false);
        }if(gc.flagArray[24] && gc.flagToggled){
            b24.setEnabled(true);
        }
        
        if(gc.flagArray[25] && !gc.flagToggled){
            b25.setEnabled(false);
        }if(gc.flagArray[25] && gc.flagToggled){
            b25.setEnabled(true);
        }
        if(gc.flagArray[26] && !gc.flagToggled){
            b26.setEnabled(false);
        }if(gc.flagArray[26] && gc.flagToggled){
            b26.setEnabled(true);
        }
        
        if(gc.flagArray[27] && !gc.flagToggled){
            b27.setEnabled(false);
        }if(gc.flagArray[27] && gc.flagToggled){
            b27.setEnabled(true);
        }
        if(gc.flagArray[28] && !gc.flagToggled){
            b28.setEnabled(false);
        }if(gc.flagArray[28] && gc.flagToggled){
            b28.setEnabled(true);
        }
        
        if(gc.flagArray[29] && !gc.flagToggled){
            b29.setEnabled(false);
        }if(gc.flagArray[29] && gc.flagToggled){
            b29.setEnabled(true);
            
        }if(gc.flagArray[30] && !gc.flagToggled){
            b30.setEnabled(false);
        }if(gc.flagArray[30] && gc.flagToggled){
            b30.setEnabled(true);
        }
        
        if(gc.flagArray[31] && !gc.flagToggled){
            b31.setEnabled(false);
        }if(gc.flagArray[31] && gc.flagToggled){
            b31.setEnabled(true);
        }
        
        if(gc.flagArray[32] && !gc.flagToggled){
            b32.setEnabled(false);
        }if(gc.flagArray[32] && gc.flagToggled){
            b32.setEnabled(true);
        }
        
        if(gc.flagArray[33] && !gc.flagToggled){
            b33.setEnabled(false);
        }if(gc.flagArray[33] && gc.flagToggled){
            b33.setEnabled(true);
        }
        if(gc.flagArray[34] && !gc.flagToggled){
            b34.setEnabled(false);
        }if(gc.flagArray[34] && gc.flagToggled){
            b34.setEnabled(true);
        }
        
        if(gc.flagArray[35] && !gc.flagToggled){
            b35.setEnabled(false);
        }if(gc.flagArray[35] && gc.flagToggled){
            b35.setEnabled(true);
        }
        if(gc.flagArray[36] && !gc.flagToggled){
            b36.setEnabled(false);
        }if(gc.flagArray[36] && gc.flagToggled){
            b36.setEnabled(true);
        }
        
        if(gc.flagArray[37] && !gc.flagToggled){
            b37.setEnabled(false);
        }if(gc.flagArray[37] && gc.flagToggled){
            b37.setEnabled(true);
        }
        if(gc.flagArray[38] && !gc.flagToggled){
            b38.setEnabled(false);
        }if(gc.flagArray[38] && gc.flagToggled){
            b38.setEnabled(true);
        }
        
        if(gc.flagArray[39] && !gc.flagToggled){
            b39.setEnabled(false);
        }if(gc.flagArray[39] && gc.flagToggled){
            b39.setEnabled(true);
        } if(gc.flagArray[40] && !gc.flagToggled){
            b40.setEnabled(false);
        }if(gc.flagArray[40] && gc.flagToggled){
            b40.setEnabled(true);
        }
        
        if(gc.flagArray[41] && !gc.flagToggled){
            b41.setEnabled(false);
        }if(gc.flagArray[41] && gc.flagToggled){
            b41.setEnabled(true);
        }
        
        if(gc.flagArray[42] && !gc.flagToggled){
            b42.setEnabled(false);
        }if(gc.flagArray[42] && gc.flagToggled){
            b42.setEnabled(true);
        }
        
        if(gc.flagArray[43] && !gc.flagToggled){
            b43.setEnabled(false);
        }if(gc.flagArray[43] && gc.flagToggled){
            b43.setEnabled(true);
        }
        if(gc.flagArray[44] && !gc.flagToggled){
            b44.setEnabled(false);
        }if(gc.flagArray[44] && gc.flagToggled){
            b44.setEnabled(true);
        }
        
        if(gc.flagArray[45] && !gc.flagToggled){
            b45.setEnabled(false);
        }if(gc.flagArray[45] && gc.flagToggled){
            b45.setEnabled(true);
        }
        if(gc.flagArray[46] && !gc.flagToggled){
            b46.setEnabled(false);
        }if(gc.flagArray[46] && gc.flagToggled){
            b46.setEnabled(true);
        }
        
        if(gc.flagArray[47] && !gc.flagToggled){
            b47.setEnabled(false);
        }if(gc.flagArray[47] && gc.flagToggled){
            b47.setEnabled(true);
        }
        if(gc.flagArray[48] && !gc.flagToggled){
            b48.setEnabled(false);
        }if(gc.flagArray[48] && gc.flagToggled){
            b48.setEnabled(true);
        }
        
        if(gc.flagArray[49] && !gc.flagToggled){
            b49.setEnabled(false);
        }if(gc.flagArray[49] && gc.flagToggled){
            b49.setEnabled(true);
        }
        if(gc.flagArray[50] && !gc.flagToggled){
            b50.setEnabled(false);
        }if(gc.flagArray[50] && gc.flagToggled){
            b50.setEnabled(true);
        }
        
        if(gc.flagArray[51] && !gc.flagToggled){
            b51.setEnabled(false);
        }if(gc.flagArray[51] && gc.flagToggled){
            b51.setEnabled(true);
        }
        
        if(gc.flagArray[52] && !gc.flagToggled){
            b52.setEnabled(false);
        }if(gc.flagArray[52] && gc.flagToggled){
            b52.setEnabled(true);
        }
        
        if(gc.flagArray[53] && !gc.flagToggled){
            b53.setEnabled(false);
        }if(gc.flagArray[53] && gc.flagToggled){
            b53.setEnabled(true);
        }
        if(gc.flagArray[54] && !gc.flagToggled){
            b54.setEnabled(false);
        }if(gc.flagArray[54] && gc.flagToggled){
            b54.setEnabled(true);
        }
        
        if(gc.flagArray[55] && !gc.flagToggled){
            b55.setEnabled(false);
        }if(gc.flagArray[55] && gc.flagToggled){
            b55.setEnabled(true);
        }
        if(gc.flagArray[56] && !gc.flagToggled){
            b56.setEnabled(false);
        }if(gc.flagArray[56] && gc.flagToggled){
            b56.setEnabled(true);
        }
        
        if(gc.flagArray[57] && !gc.flagToggled){
            b57.setEnabled(false);
        }if(gc.flagArray[57] && gc.flagToggled){
            b57.setEnabled(true);
        }
        if(gc.flagArray[58] && !gc.flagToggled){
            b58.setEnabled(false);
        }if(gc.flagArray[58] && gc.flagToggled){
            b58.setEnabled(true);
        }
        
        if(gc.flagArray[59] && !gc.flagToggled){
            b59.setEnabled(false);
        }if(gc.flagArray[59] && gc.flagToggled){
            b59.setEnabled(true);
        }
        if(gc.flagArray[60] && !gc.flagToggled){
            b60.setEnabled(false);
        }if(gc.flagArray[60] && gc.flagToggled){
            b60.setEnabled(true);
        }
        
        if(gc.flagArray[61] && !gc.flagToggled){
            b61.setEnabled(false);
        }if(gc.flagArray[61] && gc.flagToggled){
            b61.setEnabled(true);
        }
        
        if(gc.flagArray[62] && !gc.flagToggled){
            b62.setEnabled(false);
        }if(gc.flagArray[62] && gc.flagToggled){
            b62.setEnabled(true);
        }
        
        if(gc.flagArray[63] && !gc.flagToggled){
            b63.setEnabled(false);
        }if(gc.flagArray[63] && gc.flagToggled){
            b63.setEnabled(true);
        }
        if(gc.flagArray[64] && !gc.flagToggled){
            b64.setEnabled(false);
        }if(gc.flagArray[64] && gc.flagToggled){
            b64.setEnabled(true);
        }
        
        if(gc.flagArray[65] && !gc.flagToggled){
            b65.setEnabled(false);
        }if(gc.flagArray[65] && gc.flagToggled){
            b65.setEnabled(true);
        }
        if(gc.flagArray[66] && !gc.flagToggled){
            b66.setEnabled(false);
        }if(gc.flagArray[66] && gc.flagToggled){
            b66.setEnabled(true);
        }
        
        if(gc.flagArray[67] && !gc.flagToggled){
            b67.setEnabled(false);
        }if(gc.flagArray[67] && gc.flagToggled){
            b67.setEnabled(true);
        }
        if(gc.flagArray[68] && !gc.flagToggled){
            b68.setEnabled(false);
        }if(gc.flagArray[68] && gc.flagToggled){
            b68.setEnabled(true);
        }
        
        if(gc.flagArray[69] && !gc.flagToggled){
            b69.setEnabled(false);
        }if(gc.flagArray[69] && gc.flagToggled){
            b69.setEnabled(true);
        }
        if(gc.flagArray[70] && !gc.flagToggled){
            b70.setEnabled(false);
        }if(gc.flagArray[70] && gc.flagToggled){
            b70.setEnabled(true);
        }
        
        if(gc.flagArray[71] && !gc.flagToggled){
            b71.setEnabled(false);
        }if(gc.flagArray[71] && gc.flagToggled){
            b71.setEnabled(true);
        }
        
        if(gc.flagArray[72] && !gc.flagToggled){
            b72.setEnabled(false);
        }if(gc.flagArray[72] && gc.flagToggled){
            b72.setEnabled(true);
        }
        
        if(gc.flagArray[73] && !gc.flagToggled){
            b73.setEnabled(false);
        }if(gc.flagArray[73] && gc.flagToggled){
            b73.setEnabled(true);
        }
        if(gc.flagArray[74] && !gc.flagToggled){
            b74.setEnabled(false);
        }if(gc.flagArray[74] && gc.flagToggled){
            b74.setEnabled(true);
        }
        
        if(gc.flagArray[75] && !gc.flagToggled){
            b75.setEnabled(false);
        }if(gc.flagArray[75] && gc.flagToggled){
            b75.setEnabled(true);
        }
        if(gc.flagArray[76] && !gc.flagToggled){
            b76.setEnabled(false);
        }if(gc.flagArray[76] && gc.flagToggled){
            b76.setEnabled(true);
        }
        
        if(gc.flagArray[77] && !gc.flagToggled){
            b77.setEnabled(false);
        }if(gc.flagArray[77] && gc.flagToggled){
            b77.setEnabled(true);
        }
        if(gc.flagArray[78] && !gc.flagToggled){
            b78.setEnabled(false);
        }if(gc.flagArray[78] && gc.flagToggled){
            b78.setEnabled(true);
        }
        
        if(gc.flagArray[79] && !gc.flagToggled){
            b79.setEnabled(false);
        }if(gc.flagArray[79] && gc.flagToggled){
            b79.setEnabled(true);
        }
        if(gc.flagArray[80] && !gc.flagToggled){
            b80.setEnabled(false);
        }if(gc.flagArray[80] && gc.flagToggled){
            b80.setEnabled(true);
        }
        
        if(gc.flagArray[81] && !gc.flagToggled){
            b81.setEnabled(false);
        }if(gc.flagArray[81] && gc.flagToggled){
            b81.setEnabled(true);
        }
        
        if(gc.flagArray[82] && !gc.flagToggled){
            b82.setEnabled(false);
        }if(gc.flagArray[82] && gc.flagToggled){
            b82.setEnabled(true);
        }
        
        if(gc.flagArray[83] && !gc.flagToggled){
            b83.setEnabled(false);
        }if(gc.flagArray[83] && gc.flagToggled){
            b83.setEnabled(true);
        }
        if(gc.flagArray[84] && !gc.flagToggled){
            b84.setEnabled(false);
        }if(gc.flagArray[84] && gc.flagToggled){
            b84.setEnabled(true);
        }
        
        if(gc.flagArray[85] && !gc.flagToggled){
            b85.setEnabled(false);
        }if(gc.flagArray[85] && gc.flagToggled){
            b85.setEnabled(true);
        }
        if(gc.flagArray[86] && !gc.flagToggled){
            b86.setEnabled(false);
        }if(gc.flagArray[86] && gc.flagToggled){
            b86.setEnabled(true);
        }
        
        if(gc.flagArray[87] && !gc.flagToggled){
            b87.setEnabled(false);
        }if(gc.flagArray[87] && gc.flagToggled){
            b87.setEnabled(true);
        }
        if(gc.flagArray[88] && !gc.flagToggled){
            b88.setEnabled(false);
        }if(gc.flagArray[88] && gc.flagToggled){
            b88.setEnabled(true);
        }
        
        if(gc.flagArray[89] && !gc.flagToggled){
            b89.setEnabled(false);
        }if(gc.flagArray[89] && gc.flagToggled){
            b89.setEnabled(true);
        }
        if(gc.flagArray[90] && !gc.flagToggled){
            b90.setEnabled(false);
        }if(gc.flagArray[90] && gc.flagToggled){
            b90.setEnabled(true);
        }
        
        if(gc.flagArray[91] && !gc.flagToggled){
            b91.setEnabled(false);
        }if(gc.flagArray[91] && gc.flagToggled){
            b91.setEnabled(true);
        }
        
        if(gc.flagArray[92] && !gc.flagToggled){
            b92.setEnabled(false);
        }if(gc.flagArray[92] && gc.flagToggled){
            b92.setEnabled(true);
        }
        
        if(gc.flagArray[93] && !gc.flagToggled){
            b93.setEnabled(false);
        }if(gc.flagArray[93] && gc.flagToggled){
            b93.setEnabled(true);
        }
        if(gc.flagArray[94] && !gc.flagToggled){
            b94.setEnabled(false);
        }if(gc.flagArray[94] && gc.flagToggled){
            b94.setEnabled(true);
        }
        
        if(gc.flagArray[95] && !gc.flagToggled){
            b95.setEnabled(false);
        }if(gc.flagArray[95] && gc.flagToggled){
            b95.setEnabled(true);
        }
        if(gc.flagArray[96] && !gc.flagToggled){
            b96.setEnabled(false);
        }if(gc.flagArray[96] && gc.flagToggled){
            b96.setEnabled(true);
        }
        
        if(gc.flagArray[97] && !gc.flagToggled){
            b97.setEnabled(false);
        }if(gc.flagArray[97] && gc.flagToggled){
            b97.setEnabled(true);
        }
        if(gc.flagArray[98] && !gc.flagToggled){
            b98.setEnabled(false);
        }if(gc.flagArray[98] && gc.flagToggled){
            b98.setEnabled(true);
        }
        
        if(gc.flagArray[99] && !gc.flagToggled){
            b99.setEnabled(false);
        }if(gc.flagArray[99] && gc.flagToggled){
            b99.setEnabled(true);
        }
        
        }
         
    }//GEN-LAST:event_flagToggleActionPerformed

    private void b4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b4ActionPerformed
        int bNum = 4; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b4.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b4.setBackground(new Color(200,200,200));
            b4.setLabel(String.valueOf(gc.tileValue[bNum]));
            b4.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b4.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b4.setBackground(new Color(20,200,20));
            b4.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b4.setLabel("");
            b4.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b4ActionPerformed

    private void b5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b5ActionPerformed
        int bNum = 5; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b5.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b5.setBackground(new Color(200,200,200));
            b5.setLabel(String.valueOf(gc.tileValue[bNum]));
            b5.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b5.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b5.setBackground(new Color(20,200,20));
            b5.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b5.setLabel("");
            b5.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b5ActionPerformed

    private void b6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b6ActionPerformed
        int bNum = 6; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b6.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b6.setBackground(new Color(200,200,200));
            b6.setLabel(String.valueOf(gc.tileValue[bNum]));
            b6.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b6.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b6.setBackground(new Color(20,200,20));
            b6.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b6.setLabel("");
            b6.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b6ActionPerformed

    private void b7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b7ActionPerformed
        int bNum = 7; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b7.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b7.setBackground(new Color(200,200,200));
            b7.setLabel(String.valueOf(gc.tileValue[bNum]));
            b7.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b7.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b7.setBackground(new Color(20,200,20));
            b7.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b7.setLabel("");
            b7.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b7ActionPerformed

    private void b8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b8ActionPerformed
        int bNum = 8; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b8.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b8.setBackground(new Color(200,200,200));
            b8.setLabel(String.valueOf(gc.tileValue[bNum]));
            b8.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b8.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b8.setBackground(new Color(20,200,20));
            b8.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b8.setLabel("");
            b8.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
         if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b8ActionPerformed

    private void b9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b9ActionPerformed
        int bNum = 9; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b9.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b9.setBackground(new Color(200,200,200));
            b9.setLabel(String.valueOf(gc.tileValue[bNum]));
            b9.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b9.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b9.setBackground(new Color(20,200,20));
            b9.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b9.setLabel("");
            b9.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b9ActionPerformed

    private void b10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b10ActionPerformed
        int bNum = 10; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b10.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b10.setBackground(new Color(200,200,200));
            b10.setLabel(String.valueOf(gc.tileValue[bNum]));
            b10.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b10.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b10.setBackground(new Color(20,200,20));
            b10.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b10.setLabel("");
            b10.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b10ActionPerformed

    private void b11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b11ActionPerformed
        int bNum = 11; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b11.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b11.setBackground(new Color(200,200,200));
            b11.setLabel(String.valueOf(gc.tileValue[bNum]));
            b11.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b11.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b11.setBackground(new Color(20,200,20));
            b11.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b11.setLabel("");
            b11.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b11ActionPerformed

    private void b12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b12ActionPerformed
        int bNum = 12; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b12.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b12.setBackground(new Color(200,200,200));
            b12.setLabel(String.valueOf(gc.tileValue[bNum]));
            b12.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b12.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b12.setBackground(new Color(20,200,20));
            b12.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b12.setLabel("");
            b12.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b12ActionPerformed

    private void b13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b13ActionPerformed
        int bNum = 13; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b13.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b13.setBackground(new Color(200,200,200));
            b13.setLabel(String.valueOf(gc.tileValue[bNum]));
            b13.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b13.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b13.setBackground(new Color(20,200,20));
            b13.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b13.setLabel("");
            b13.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b13ActionPerformed

    private void b14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b14ActionPerformed
        int bNum = 14; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b14.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b14.setBackground(new Color(200,200,200));
            b14.setLabel(String.valueOf(gc.tileValue[bNum]));
            b14.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b14.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b14.setBackground(new Color(20,200,20));
            b14.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b14.setLabel("");
            b14.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b14ActionPerformed

    private void b15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b15ActionPerformed
        int bNum = 15; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b15.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b15.setBackground(new Color(200,200,200));
            b15.setLabel(String.valueOf(gc.tileValue[bNum]));
            b15.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b15.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b15.setBackground(new Color(20,200,20));
            b15.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b15.setLabel("");
            b15.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b15ActionPerformed

    private void b16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b16ActionPerformed
        int bNum = 16; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b16.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b16.setBackground(new Color(200,200,200));
            b16.setLabel(String.valueOf(gc.tileValue[bNum]));
            b16.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b16.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b16.setBackground(new Color(20,200,20));
            b16.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b16.setLabel("");
            b16.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b16ActionPerformed

    private void b17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b17ActionPerformed
        int bNum = 17; //button identifier
        
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b17.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b17.setBackground(new Color(200,200,200));
            b17.setLabel(String.valueOf(gc.tileValue[bNum]));
            b17.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b17.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b17.setBackground(new Color(20,200,20));
            b17.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b17.setLabel("");
            b17.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b17ActionPerformed

    private void b18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b18ActionPerformed
        int bNum = 18; //button identifier
            
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b18.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b18.setBackground(new Color(200,200,200));
            b18.setLabel(String.valueOf(gc.tileValue[bNum]));
            b18.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b18.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b18.setBackground(new Color(20,200,20));
            b18.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b18.setLabel("");
            b18.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b18ActionPerformed

    private void b19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b19ActionPerformed
        int bNum = 19; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b19.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b19.setBackground(new Color(200,200,200));
            b19.setLabel(String.valueOf(gc.tileValue[bNum]));
            b19.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b19.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b19.setBackground(new Color(20,200,20));
            b19.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b19.setLabel("");
            b19.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b19ActionPerformed

    private void b20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b20ActionPerformed
        int bNum = 20; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b20.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b20.setBackground(new Color(200,200,200));
            b20.setLabel(String.valueOf(gc.tileValue[bNum]));
            b20.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b20.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b20.setBackground(new Color(20,200,20));
            b20.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b20.setLabel("");
            b20.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b20ActionPerformed

    private void b21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b21ActionPerformed
        int bNum = 21; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b21.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b21.setBackground(new Color(200,200,200));
            b21.setLabel(String.valueOf(gc.tileValue[bNum]));
            b21.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b21.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b21.setBackground(new Color(20,200,20));
            b21.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b21.setLabel("");
            b21.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b21ActionPerformed

    private void b22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b22ActionPerformed
        int bNum = 22; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b22.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b22.setBackground(new Color(200,200,200));
            b22.setLabel(String.valueOf(gc.tileValue[bNum]));
            b22.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b22.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b22.setBackground(new Color(20,200,20));
            b22.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b22.setLabel("");
            b22.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b22ActionPerformed

    private void b23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b23ActionPerformed
        int bNum = 23; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b23.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b23.setBackground(new Color(200,200,200));
            b23.setLabel(String.valueOf(gc.tileValue[bNum]));
            b23.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b23.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b23.setBackground(new Color(20,200,20));
            b23.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b23.setLabel("");
            b23.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b23ActionPerformed

    private void b24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b24ActionPerformed
        int bNum = 24; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b24.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b24.setBackground(new Color(200,200,200));
            b24.setLabel(String.valueOf(gc.tileValue[bNum]));
            b24.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b24.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b24.setBackground(new Color(20,200,20));
            b24.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b24.setLabel("");
            b24.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b24ActionPerformed

    private void b25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b25ActionPerformed
        int bNum = 25; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b25.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b25.setBackground(new Color(200,200,200));
            b25.setLabel(String.valueOf(gc.tileValue[bNum]));
            b25.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b25.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b25.setBackground(new Color(20,200,20));
            b25.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b25.setLabel("");
            b25.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
            
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b25ActionPerformed

    private void b26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b26ActionPerformed
        int bNum = 26; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b26.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b26.setBackground(new Color(200,200,200));
            b26.setLabel(String.valueOf(gc.tileValue[bNum]));
            b26.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b26.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b26.setBackground(new Color(20,200,20));
            b26.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b26.setLabel("");
            b26.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b26ActionPerformed

    private void b27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b27ActionPerformed
        int bNum = 27; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b27.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b27.setBackground(new Color(200,200,200));
            b27.setLabel(String.valueOf(gc.tileValue[bNum]));
            b27.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b27.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b27.setBackground(new Color(20,200,20));
            b27.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b27.setLabel("");
            b27.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b27ActionPerformed

    private void b28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b28ActionPerformed
        int bNum = 28; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b28.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b28.setBackground(new Color(200,200,200));
            b28.setLabel(String.valueOf(gc.tileValue[bNum]));
            b28.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b28.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b28.setBackground(new Color(20,200,20));
            b28.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b28.setLabel("");
            b28.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b28ActionPerformed

    private void b29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b29ActionPerformed
        int bNum = 29; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b29.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b29.setBackground(new Color(200,200,200));
            b29.setLabel(String.valueOf(gc.tileValue[bNum]));
            b29.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b29.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b29.setBackground(new Color(20,200,20));
            b29.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b29.setLabel("");
            b29.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b29ActionPerformed

    private void b30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b30ActionPerformed
        int bNum = 30; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b30.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b30.setBackground(new Color(200,200,200));
            b30.setLabel(String.valueOf(gc.tileValue[bNum]));
            b30.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b30.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b30.setBackground(new Color(20,200,20));
            b30.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b30.setLabel("");
            b30.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b30ActionPerformed

    private void b31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b31ActionPerformed
        int bNum = 31; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b31.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b31.setBackground(new Color(200,200,200));
            b31.setLabel(String.valueOf(gc.tileValue[bNum]));
            b31.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b31.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b31.setBackground(new Color(20,200,20));
            b31.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b31.setLabel("");
            b31.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b31ActionPerformed

    private void b32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b32ActionPerformed
        int bNum = 32; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b32.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b32.setBackground(new Color(200,200,200));
            b32.setLabel(String.valueOf(gc.tileValue[bNum]));
            b32.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b32.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b32.setBackground(new Color(20,200,20));
            b32.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b32.setLabel("");
            b32.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b32ActionPerformed

    private void b33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b33ActionPerformed
        int bNum = 33; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b33.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b33.setBackground(new Color(200,200,200));
            b33.setLabel(String.valueOf(gc.tileValue[bNum]));
            b33.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b33.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b33.setBackground(new Color(20,200,20));
            b33.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b33.setLabel("");
            b33.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b33ActionPerformed

    private void b34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b34ActionPerformed
        int bNum = 34; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b34.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b34.setBackground(new Color(200,200,200));
            b34.setLabel(String.valueOf(gc.tileValue[bNum]));
            b34.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b34.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b34.setBackground(new Color(20,200,20));
            b34.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b34.setLabel("");
            b34.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b34ActionPerformed

    private void b35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b35ActionPerformed
        int bNum = 35; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b35.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b35.setBackground(new Color(200,200,200));
            b35.setLabel(String.valueOf(gc.tileValue[bNum]));
            b35.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b35.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b35.setBackground(new Color(20,200,20));
            b35.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b35.setLabel("");
            b35.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b35ActionPerformed

    private void b36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b36ActionPerformed
        int bNum = 36; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b36.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b36.setBackground(new Color(200,200,200));
            b36.setLabel(String.valueOf(gc.tileValue[bNum]));
            b36.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b36.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b36.setBackground(new Color(20,200,20));
            b36.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b36.setLabel("");
            b36.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b36ActionPerformed

    private void b37ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b37ActionPerformed
        int bNum = 37; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b37.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b37.setBackground(new Color(200,200,200));
            b37.setLabel(String.valueOf(gc.tileValue[bNum]));
            b37.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b37.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b37.setBackground(new Color(20,200,20));
            b37.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b37.setLabel("");
            b37.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b37ActionPerformed

    private void b38ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b38ActionPerformed
        int bNum = 38; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b38.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b38.setBackground(new Color(200,200,200));
            b38.setLabel(String.valueOf(gc.tileValue[bNum]));
            b38.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b38.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b38.setBackground(new Color(20,200,20));
            b38.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b38.setLabel("");
            b38.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b38ActionPerformed

    private void b39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b39ActionPerformed
        int bNum = 39; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b39.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b39.setBackground(new Color(200,200,200));
            b39.setLabel(String.valueOf(gc.tileValue[bNum]));
            b39.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b39.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b39.setBackground(new Color(20,200,20));
            b39.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b39.setLabel("");
            b39.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b39ActionPerformed

    private void b40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b40ActionPerformed
        int bNum = 40; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b40.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b40.setBackground(new Color(200,200,200));
            b40.setLabel(String.valueOf(gc.tileValue[bNum]));
            b40.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b40.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b40.setBackground(new Color(20,200,20));
            b40.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b40.setLabel("");
            b40.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b40ActionPerformed

    private void b41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b41ActionPerformed
        int bNum = 41; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b41.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b41.setBackground(new Color(200,200,200));
            b41.setLabel(String.valueOf(gc.tileValue[bNum]));
            b41.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b41.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b41.setBackground(new Color(20,200,20));
            b41.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b41.setLabel("");
            b41.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b41ActionPerformed

    private void b42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b42ActionPerformed
        int bNum = 42; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b42.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b42.setBackground(new Color(200,200,200));
            b42.setLabel(String.valueOf(gc.tileValue[bNum]));
            b42.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b42.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b42.setBackground(new Color(20,200,20));
            b42.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b42.setLabel("");
            b42.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b42ActionPerformed

    private void b43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b43ActionPerformed
        int bNum = 43; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b43.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b43.setBackground(new Color(200,200,200));
            b43.setLabel(String.valueOf(gc.tileValue[bNum]));
            b43.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b43.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b43.setBackground(new Color(20,200,20));
            b43.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b43.setLabel("");
            b43.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b43ActionPerformed

    private void b44ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b44ActionPerformed
        int bNum = 44; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b44.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b44.setBackground(new Color(200,200,200));
            b44.setLabel(String.valueOf(gc.tileValue[bNum]));
            b44.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b44.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b44.setBackground(new Color(20,200,20));
            b44.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b44.setLabel("");
            b44.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
          gc.winCondition();    
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b44ActionPerformed

    private void b45ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b45ActionPerformed
        int bNum = 45; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b45.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b45.setBackground(new Color(200,200,200));
            b45.setLabel(String.valueOf(gc.tileValue[bNum]));
            b45.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b45.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b45.setBackground(new Color(20,200,20));
            b45.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b45.setLabel("");
            b45.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b45ActionPerformed

    private void b46ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b46ActionPerformed
        int bNum = 46; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b46.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b46.setBackground(new Color(200,200,200));
            b46.setLabel(String.valueOf(gc.tileValue[bNum]));
            b46.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b46.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b46.setBackground(new Color(20,200,20));
            b46.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b46.setLabel("");
            b46.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b46ActionPerformed

    private void b47ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b47ActionPerformed
        int bNum = 47; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b47.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b47.setBackground(new Color(200,200,200));
            b47.setLabel(String.valueOf(gc.tileValue[bNum]));
            b47.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b47.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b47.setBackground(new Color(20,200,20));
            b47.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b47.setLabel("");
            b47.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b47ActionPerformed

    private void b48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b48ActionPerformed
        int bNum = 48; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b48.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b48.setBackground(new Color(200,200,200));
            b48.setLabel(String.valueOf(gc.tileValue[bNum]));
            b48.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b48.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b48.setBackground(new Color(20,200,20));
            b48.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b48.setLabel("");
            b48.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();        
        if(gc.gameIsWon){
            winScreen();
        }
                
    }//GEN-LAST:event_b48ActionPerformed

    private void b49ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b49ActionPerformed
        int bNum = 49; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b49.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b49.setBackground(new Color(200,200,200));
            b49.setLabel(String.valueOf(gc.tileValue[bNum]));
            b49.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b49.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b49.setBackground(new Color(20,200,20));
            b49.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b49.setLabel("");
            b49.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b49ActionPerformed

    private void b50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b50ActionPerformed
        int bNum = 50; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b50.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b50.setBackground(new Color(200,200,200));
            b50.setLabel(String.valueOf(gc.tileValue[bNum]));
            b50.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b50.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b50.setBackground(new Color(20,200,20));
            b50.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b50.setLabel("");
            b50.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b50ActionPerformed

    private void b51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b51ActionPerformed
        int bNum = 51; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b51.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b51.setBackground(new Color(200,200,200));
            b51.setLabel(String.valueOf(gc.tileValue[bNum]));
            b51.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b51.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b51.setBackground(new Color(20,200,20));
            b51.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b51.setLabel("");
            b51.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b51ActionPerformed

    private void b52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b52ActionPerformed
        int bNum = 52; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b52.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b52.setBackground(new Color(200,200,200));
            b52.setLabel(String.valueOf(gc.tileValue[bNum]));
            b52.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b52.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b52.setBackground(new Color(20,200,20));
            b52.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b52.setLabel("");
            b52.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b52ActionPerformed

    private void b53ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b53ActionPerformed
        int bNum = 53; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b53.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b53.setBackground(new Color(200,200,200));
            b53.setLabel(String.valueOf(gc.tileValue[bNum]));
            b53.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b53.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b53.setBackground(new Color(20,200,20));
            b53.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b53.setLabel("");
            b53.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b53ActionPerformed

    private void b54ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b54ActionPerformed
        int bNum = 54; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b54.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b54.setBackground(new Color(200,200,200));
            b54.setLabel(String.valueOf(gc.tileValue[bNum]));
            b54.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b54.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b54.setBackground(new Color(20,200,20));
            b54.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b54.setLabel("");
            b54.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b54ActionPerformed

    private void b55ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b55ActionPerformed
        int bNum = 55; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b55.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b55.setBackground(new Color(200,200,200));
            b55.setLabel(String.valueOf(gc.tileValue[bNum]));
            b55.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b55.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b55.setBackground(new Color(20,200,20));
            b55.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b55.setLabel("");
            b55.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b55ActionPerformed

    private void b56ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b56ActionPerformed
        int bNum = 56; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b56.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b56.setBackground(new Color(200,200,200));
            b56.setLabel(String.valueOf(gc.tileValue[bNum]));
            b56.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b56.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b56.setBackground(new Color(20,200,20));
            b56.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b56.setLabel("");
            b56.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b56ActionPerformed

    private void b57ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b57ActionPerformed
        int bNum = 57; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b57.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b57.setBackground(new Color(200,200,200));
            b57.setLabel(String.valueOf(gc.tileValue[bNum]));
            b57.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b57.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b57.setBackground(new Color(20,200,20));
            b57.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b57.setLabel("");
            b57.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b57ActionPerformed

    private void b58ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b58ActionPerformed
        int bNum = 58; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b58.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b58.setBackground(new Color(200,200,200));
            b58.setLabel(String.valueOf(gc.tileValue[bNum]));
            b58.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b58.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b58.setBackground(new Color(20,200,20));
            b58.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b58.setLabel("");
            b58.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b58ActionPerformed

    private void b59ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b59ActionPerformed
        int bNum = 59; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b59.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b59.setBackground(new Color(200,200,200));
            b59.setLabel(String.valueOf(gc.tileValue[bNum]));
            b59.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b59.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b59.setBackground(new Color(20,200,20));
            b59.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b59.setLabel("");
            b59.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
        
    }//GEN-LAST:event_b59ActionPerformed

    private void b60ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b60ActionPerformed
        int bNum = 60; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b60.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b60.setBackground(new Color(200,200,200));
            b60.setLabel(String.valueOf(gc.tileValue[bNum]));
            b60.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b60.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b60.setBackground(new Color(20,200,20));
            b60.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b60.setLabel("");
            b60.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b60ActionPerformed

    private void b61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b61ActionPerformed
        int bNum = 61; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b61.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b61.setBackground(new Color(200,200,200));
            b61.setLabel(String.valueOf(gc.tileValue[bNum]));
            b61.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b61.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b61.setBackground(new Color(20,200,20));
            b61.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b61.setLabel("");
            b61.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b61ActionPerformed

    private void b62ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b62ActionPerformed
        int bNum = 62; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b62.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b62.setBackground(new Color(200,200,200));
            b62.setLabel(String.valueOf(gc.tileValue[bNum]));
            b62.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b62.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b62.setBackground(new Color(20,200,20));
            b62.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b62.setLabel("");
            b62.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b62ActionPerformed

    private void b63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b63ActionPerformed
        int bNum = 63; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b63.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b63.setBackground(new Color(200,200,200));
            b63.setLabel(String.valueOf(gc.tileValue[bNum]));
            b63.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b63.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b63.setBackground(new Color(20,200,20));
            b63.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b63.setLabel("");
            b63.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b63ActionPerformed

    private void b64ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b64ActionPerformed
        int bNum = 64; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b64.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b64.setBackground(new Color(200,200,200));
            b64.setLabel(String.valueOf(gc.tileValue[bNum]));
            b64.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b64.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b64.setBackground(new Color(20,200,20));
            b64.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b64.setLabel("");
            b64.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b64ActionPerformed

    private void b65ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b65ActionPerformed
        int bNum = 65; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b65.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b65.setBackground(new Color(200,200,200));
            b65.setLabel(String.valueOf(gc.tileValue[bNum]));
            b65.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b65.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b65.setBackground(new Color(20,200,20));
            b65.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b65.setLabel("");
            b65.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b65ActionPerformed

    private void b66ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b66ActionPerformed
        int bNum = 66; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b66.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b66.setBackground(new Color(200,200,200));
            b66.setLabel(String.valueOf(gc.tileValue[bNum]));
            b66.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b66.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b66.setBackground(new Color(20,200,20));
            b66.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b66.setLabel("");
            b66.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b66ActionPerformed

    private void b67ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b67ActionPerformed
        int bNum = 67; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b67.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b67.setBackground(new Color(200,200,200));
            b67.setLabel(String.valueOf(gc.tileValue[bNum]));
            b67.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b67.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b67.setBackground(new Color(20,200,20));
            b67.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b67.setLabel("");
            b67.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b67ActionPerformed

    private void b68ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b68ActionPerformed
        int bNum = 68; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b68.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b68.setBackground(new Color(200,200,200));
            b68.setLabel(String.valueOf(gc.tileValue[bNum]));
            b68.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b68.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b68.setBackground(new Color(20,200,20));
            b68.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b68.setLabel("");
            b68.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b68ActionPerformed

    private void b69ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b69ActionPerformed
        int bNum = 69; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b69.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b69.setBackground(new Color(200,200,200));
            b69.setLabel(String.valueOf(gc.tileValue[bNum]));
            b69.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b69.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b69.setBackground(new Color(20,200,20));
            b69.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b69.setLabel("");
            b69.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b69ActionPerformed

    private void b70ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b70ActionPerformed
        int bNum = 70; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b70.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b70.setBackground(new Color(200,200,200));
            b70.setLabel(String.valueOf(gc.tileValue[bNum]));
            b70.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b70.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b70.setBackground(new Color(20,200,20));
            b70.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b70.setLabel("");
            b70.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b70ActionPerformed

    private void b71ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b71ActionPerformed
        int bNum = 71; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b71.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b71.setBackground(new Color(200,200,200));
            b71.setLabel(String.valueOf(gc.tileValue[bNum]));
            b71.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b71.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b71.setBackground(new Color(20,200,20));
            b71.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b71.setLabel("");
            b71.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b71ActionPerformed

    private void b72ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b72ActionPerformed
        int bNum = 72; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b72.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b72.setBackground(new Color(200,200,200));
            b72.setLabel(String.valueOf(gc.tileValue[bNum]));
            b72.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b72.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b72.setBackground(new Color(20,200,20));
            b72.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b72.setLabel("");
            b72.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b72ActionPerformed

    private void b73ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b73ActionPerformed
        int bNum = 73; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b73.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b73.setBackground(new Color(200,200,200));
            b73.setLabel(String.valueOf(gc.tileValue[bNum]));
            b73.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b73.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b73.setBackground(new Color(20,200,20));
            b73.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b73.setLabel("");
            b73.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b73ActionPerformed

    private void b74ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b74ActionPerformed
        int bNum = 74; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b74.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b74.setBackground(new Color(200,200,200));
            b74.setLabel(String.valueOf(gc.tileValue[bNum]));
            b74.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b74.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b74.setBackground(new Color(20,200,20));
            b74.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b74.setLabel("");
            b74.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b74ActionPerformed

    private void b75ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b75ActionPerformed
        int bNum = 75; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b75.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b75.setBackground(new Color(200,200,200));
            b75.setLabel(String.valueOf(gc.tileValue[bNum]));
            b75.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b75.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b75.setBackground(new Color(20,200,20));
            b75.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b75.setLabel("");
            b75.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b75ActionPerformed

    private void b76ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b76ActionPerformed
        int bNum = 76; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b76.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b76.setBackground(new Color(200,200,200));
            b76.setLabel(String.valueOf(gc.tileValue[bNum]));
            b76.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b76.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b76.setBackground(new Color(20,200,20));
            b76.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b76.setLabel("");
            b76.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b76ActionPerformed

    private void b77ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b77ActionPerformed
        int bNum = 77; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b77.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b77.setBackground(new Color(200,200,200));
            b77.setLabel(String.valueOf(gc.tileValue[bNum]));
            b77.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b77.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b77.setBackground(new Color(20,200,20));
            b77.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b77.setLabel("");
            b77.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b77ActionPerformed

    private void b78ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b78ActionPerformed
        int bNum = 78; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b78.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b78.setBackground(new Color(200,200,200));
            b78.setLabel(String.valueOf(gc.tileValue[bNum]));
            b78.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b78.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b78.setBackground(new Color(20,200,20));
            b78.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b78.setLabel("");
            b78.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b78ActionPerformed

    private void b79ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b79ActionPerformed
        int bNum = 79; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b79.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b79.setBackground(new Color(200,200,200));
            b79.setLabel(String.valueOf(gc.tileValue[bNum]));
            b79.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b79.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b79.setBackground(new Color(20,200,20));
            b79.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b79.setLabel("");
            b79.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b79ActionPerformed

    private void b80ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b80ActionPerformed
        int bNum = 80; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b80.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b80.setBackground(new Color(200,200,200));
            b80.setLabel(String.valueOf(gc.tileValue[bNum]));
            b80.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b80.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b80.setBackground(new Color(20,200,20));
            b80.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b80.setLabel("");
            b80.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
        
    }//GEN-LAST:event_b80ActionPerformed

    private void b81ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b81ActionPerformed
        int bNum = 81; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b81.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b81.setBackground(new Color(200,200,200));
            b81.setLabel(String.valueOf(gc.tileValue[bNum]));
            b81.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b81.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b81.setBackground(new Color(20,200,20));
            b81.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b81.setLabel("");
            b81.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b81ActionPerformed

    private void b82ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b82ActionPerformed
        int bNum = 82; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b82.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b82.setBackground(new Color(200,200,200));
            b82.setLabel(String.valueOf(gc.tileValue[bNum]));
            b82.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b82.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b82.setBackground(new Color(20,200,20));
            b82.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b82.setLabel("");
            b82.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b82ActionPerformed

    private void b83ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b83ActionPerformed
        int bNum = 83; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b83.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b83.setBackground(new Color(200,200,200));
            b83.setLabel(String.valueOf(gc.tileValue[bNum]));
            b83.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b83.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b83.setBackground(new Color(20,200,20));
            b83.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b83.setLabel("");
            b83.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b83ActionPerformed

    private void b84ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b84ActionPerformed
        int bNum = 84; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b84.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b84.setBackground(new Color(200,200,200));
            b84.setLabel(String.valueOf(gc.tileValue[bNum]));
            b84.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b84.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b84.setBackground(new Color(20,200,20));
            b84.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b84.setLabel("");
            b84.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b84ActionPerformed

    private void b85ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b85ActionPerformed
        int bNum = 85; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b85.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b85.setBackground(new Color(200,200,200));
            b85.setLabel(String.valueOf(gc.tileValue[bNum]));
            b85.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b85.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b85.setBackground(new Color(20,200,20));
            b85.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b85.setLabel("");
            b85.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b85ActionPerformed

    private void b86ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b86ActionPerformed
        int bNum = 86; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b86.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b86.setBackground(new Color(200,200,200));
            b86.setLabel(String.valueOf(gc.tileValue[bNum]));
            b86.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b86.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b86.setBackground(new Color(20,200,20));
            b86.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b86.setLabel("");
            b86.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
            gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
        }
    }//GEN-LAST:event_b86ActionPerformed

    private void b87ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b87ActionPerformed
        int bNum = 87; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b87.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b87.setBackground(new Color(200,200,200));
            b87.setLabel(String.valueOf(gc.tileValue[bNum]));
            b87.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b87.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b87.setBackground(new Color(20,200,20));
            b87.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b87.setLabel("");
            b87.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b87ActionPerformed

    private void b88ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b88ActionPerformed
        int bNum = 88; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b88.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b88.setBackground(new Color(200,200,200));
            b88.setLabel(String.valueOf(gc.tileValue[bNum]));
            b88.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b88.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b88.setBackground(new Color(20,200,20));
            b88.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b88.setLabel("");
            b88.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b88ActionPerformed

    private void b89ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b89ActionPerformed
        int bNum = 89; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b89.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b89.setBackground(new Color(200,200,200));
            b89.setLabel(String.valueOf(gc.tileValue[bNum]));
            b89.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b89.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b89.setBackground(new Color(20,200,20));
            b89.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b89.setLabel("");
            b89.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b89ActionPerformed

    private void b90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b90ActionPerformed
        int bNum = 90; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b90.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b90.setBackground(new Color(200,200,200));
            b90.setLabel(String.valueOf(gc.tileValue[bNum]));
            b90.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b90.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b90.setBackground(new Color(20,200,20));
            b90.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b90.setLabel("");
            b90.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b90ActionPerformed

    private void b91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b91ActionPerformed
        int bNum = 91; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b91.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b91.setBackground(new Color(200,200,200));
            b91.setLabel(String.valueOf(gc.tileValue[bNum]));
            b91.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b91.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b91.setBackground(new Color(20,200,20));
            b91.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b91.setLabel("");
            b91.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b91ActionPerformed

    private void b92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b92ActionPerformed
        int bNum = 92; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b92.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b92.setBackground(new Color(200,200,200));
            b92.setLabel(String.valueOf(gc.tileValue[bNum]));
            b92.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b92.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b92.setBackground(new Color(20,200,20));
            b92.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b92.setLabel("");
            b92.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b92ActionPerformed

    private void b93ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b93ActionPerformed
        int bNum = 93; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b93.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b93.setBackground(new Color(200,200,200));
            b93.setLabel(String.valueOf(gc.tileValue[bNum]));
            b93.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b93.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b93.setBackground(new Color(20,200,20));
            b93.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b93.setLabel("");
            b93.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b93ActionPerformed

    private void b94ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b94ActionPerformed
        int bNum = 94; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b94.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b94.setBackground(new Color(200,200,200));
            b94.setLabel(String.valueOf(gc.tileValue[bNum]));
            b94.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b94.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b94.setBackground(new Color(20,200,20));
            b94.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b94.setLabel("");
            b94.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b94ActionPerformed

    private void b95ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b95ActionPerformed
        int bNum = 95; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b95.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b95.setBackground(new Color(200,200,200));
            b95.setLabel(String.valueOf(gc.tileValue[bNum]));
            b95.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b95.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b95.setBackground(new Color(20,200,20));
            b95.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b95.setLabel("");
            b95.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b95ActionPerformed

    private void b96ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b96ActionPerformed
        int bNum = 96; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b96.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b96.setBackground(new Color(200,200,200));
            b96.setLabel(String.valueOf(gc.tileValue[bNum]));
            b96.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b96.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b96.setBackground(new Color(20,200,20));
            b96.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b96.setLabel("");
            b96.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b96ActionPerformed

    private void b97ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b97ActionPerformed
        int bNum = 97; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b97.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b97.setBackground(new Color(200,200,200));
            b97.setLabel(String.valueOf(gc.tileValue[bNum]));
            b97.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b97.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b97.setBackground(new Color(20,200,20));
            b97.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b97.setLabel("");
            b97.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b97ActionPerformed

    private void b98ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b98ActionPerformed
        int bNum = 98; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b98.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b98.setBackground(new Color(200,200,200));
            b98.setLabel(String.valueOf(gc.tileValue[bNum]));
            b98.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b98.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b98.setBackground(new Color(20,200,20));
            b98.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b98.setLabel("");
            b98.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b98ActionPerformed

    private void b99ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b99ActionPerformed
        int bNum = 99; //button identifier
        
        if(!gc.flagToggled){
        if(gc.bombArray[bNum]){  //if there's a bomb
            b99.setBackground(new Color(200,20,20));
            loseScreen();
        } 
        if(!gc.bombArray[bNum]){ // no bomb
            b99.setBackground(new Color(200,200,200));
            b99.setLabel(String.valueOf(gc.tileValue[bNum]));
            b99.setEnabled(false);
            
            gc.selectedArray[bNum] = true;

        }        
        }else{ //flagging tiles
            b99.setEnabled(true);
            if(!gc.flagArray[bNum]){

            b99.setBackground(new Color(20,200,20));
            b99.setLabel("f");
            gc.flagArray[bNum] = true;
                
            } else {
            b99.setLabel("");
            b99.setBackground(new Color(153,153,153));
            gc.flagArray[bNum] = false;

            }
        }
        gc.winCondition();
        if(gc.gameIsWon){
            winScreen();
        }
    }//GEN-LAST:event_b99ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public java.awt.Button b0;
    public java.awt.Button b1;
    public java.awt.Button b10;
    public java.awt.Button b11;
    public java.awt.Button b12;
    public java.awt.Button b13;
    public java.awt.Button b14;
    public java.awt.Button b15;
    public java.awt.Button b16;
    public java.awt.Button b17;
    public java.awt.Button b18;
    public java.awt.Button b19;
    public java.awt.Button b2;
    public java.awt.Button b20;
    public java.awt.Button b21;
    public java.awt.Button b22;
    public java.awt.Button b23;
    public java.awt.Button b24;
    public java.awt.Button b25;
    public java.awt.Button b26;
    public java.awt.Button b27;
    public java.awt.Button b28;
    public java.awt.Button b29;
    public java.awt.Button b3;
    public java.awt.Button b30;
    public java.awt.Button b31;
    public java.awt.Button b32;
    public java.awt.Button b33;
    public java.awt.Button b34;
    public java.awt.Button b35;
    public java.awt.Button b36;
    public java.awt.Button b37;
    public java.awt.Button b38;
    public java.awt.Button b39;
    public java.awt.Button b4;
    public java.awt.Button b40;
    public java.awt.Button b41;
    public java.awt.Button b42;
    public java.awt.Button b43;
    public java.awt.Button b44;
    public java.awt.Button b45;
    public java.awt.Button b46;
    public java.awt.Button b47;
    public java.awt.Button b48;
    public java.awt.Button b49;
    public java.awt.Button b5;
    public java.awt.Button b50;
    public java.awt.Button b51;
    public java.awt.Button b52;
    public java.awt.Button b53;
    public java.awt.Button b54;
    public java.awt.Button b55;
    public java.awt.Button b56;
    public java.awt.Button b57;
    public java.awt.Button b58;
    public java.awt.Button b59;
    public java.awt.Button b6;
    public java.awt.Button b60;
    public java.awt.Button b61;
    public java.awt.Button b62;
    public java.awt.Button b63;
    public java.awt.Button b64;
    public java.awt.Button b65;
    public java.awt.Button b66;
    public java.awt.Button b67;
    public java.awt.Button b68;
    public java.awt.Button b69;
    public java.awt.Button b7;
    public java.awt.Button b70;
    public java.awt.Button b71;
    public java.awt.Button b72;
    public java.awt.Button b73;
    public java.awt.Button b74;
    public java.awt.Button b75;
    public java.awt.Button b76;
    public java.awt.Button b77;
    public java.awt.Button b78;
    public java.awt.Button b79;
    public java.awt.Button b8;
    public java.awt.Button b80;
    public java.awt.Button b81;
    public java.awt.Button b82;
    public java.awt.Button b83;
    public java.awt.Button b84;
    public java.awt.Button b85;
    public java.awt.Button b86;
    public java.awt.Button b87;
    public java.awt.Button b88;
    public java.awt.Button b89;
    public java.awt.Button b9;
    public java.awt.Button b90;
    public java.awt.Button b91;
    public java.awt.Button b92;
    public java.awt.Button b93;
    public java.awt.Button b94;
    public java.awt.Button b95;
    public java.awt.Button b96;
    public java.awt.Button b97;
    public java.awt.Button b98;
    public java.awt.Button b99;
    private javax.swing.JButton btnReset;
    private javax.swing.JCheckBox flagToggle;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblInstruction1;
    private javax.swing.JLabel lblInstruction2;
    private javax.swing.JLabel lblInstruction3;
    private javax.swing.JLabel lblInstruction4;
    private javax.swing.JLabel lblInstruction5;
    private javax.swing.JLabel lblMessage;
    // End of variables declaration//GEN-END:variables

   void loseScreen(){ //this method delivers the lose screen when a bomb is pressed.
       
       
       //displays new game on the reset button
       btnReset.setText("New Game");
  
       //disable all buttons
       
       b0.setEnabled(false); b20.setEnabled(false); b39.setEnabled(false); b59.setEnabled(false); b79.setEnabled(false); b99.setEnabled(false); 
       b1.setEnabled(false); b21.setEnabled(false); b40.setEnabled(false); b60.setEnabled(false); b80.setEnabled(false); 
       b2.setEnabled(false); b22.setEnabled(false); b41.setEnabled(false); b61.setEnabled(false); b81.setEnabled(false); 
       b3.setEnabled(false); b23.setEnabled(false); b42.setEnabled(false); b62.setEnabled(false); b82.setEnabled(false); 
       b4.setEnabled(false); b23.setEnabled(false); b43.setEnabled(false); b63.setEnabled(false); b83.setEnabled(false); 
       b5.setEnabled(false); b24.setEnabled(false); b44.setEnabled(false); b64.setEnabled(false); b84.setEnabled(false); 
       b6.setEnabled(false); b25.setEnabled(false); b45.setEnabled(false); b65.setEnabled(false); b85.setEnabled(false); 
       b7.setEnabled(false); b26.setEnabled(false); b46.setEnabled(false); b66.setEnabled(false); b86.setEnabled(false); 
       b8.setEnabled(false); b27.setEnabled(false); b47.setEnabled(false); b67.setEnabled(false); b87.setEnabled(false); 
       b9.setEnabled(false); b28.setEnabled(false); b48.setEnabled(false); b68.setEnabled(false); b88.setEnabled(false); 
       b10.setEnabled(false); b29.setEnabled(false); b49.setEnabled(false); b69.setEnabled(false); b89.setEnabled(false); 
       b11.setEnabled(false); b30.setEnabled(false); b50.setEnabled(false); b70.setEnabled(false); b90.setEnabled(false); 
       b12.setEnabled(false); b31.setEnabled(false); b51.setEnabled(false); b71.setEnabled(false); b91.setEnabled(false); 
       b13.setEnabled(false); b32.setEnabled(false); b52.setEnabled(false); b72.setEnabled(false); b92.setEnabled(false); 
       b14.setEnabled(false); b33.setEnabled(false); b53.setEnabled(false); b73.setEnabled(false); b93.setEnabled(false); 
       b15.setEnabled(false); b34.setEnabled(false); b54.setEnabled(false); b74.setEnabled(false); b94.setEnabled(false); 
       b16.setEnabled(false); b35.setEnabled(false); b55.setEnabled(false); b75.setEnabled(false); b95.setEnabled(false); 
       b17.setEnabled(false); b36.setEnabled(false); b56.setEnabled(false); b76.setEnabled(false); b96.setEnabled(false); 
       b18.setEnabled(false); b37.setEnabled(false); b57.setEnabled(false); b77.setEnabled(false); b97.setEnabled(false); 
       b19.setEnabled(false); b38.setEnabled(false); b58.setEnabled(false); b78.setEnabled(false); b98.setEnabled(false); 
       
       //using a timer to animate the fail label.
      
       lblMessage.setForeground(new Color(200,20,20));
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("Y");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("Yo");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You");  
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You f");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You fa");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You fai");  
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You fail");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You faile");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You failed");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You failed.");
         new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You failed. .");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You failed. .");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You failed. . .");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You failed. . . ."); 
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You failed. . . . ."); 
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
       lblMessage.setForeground(new Color(0,0,0));
       lblMessage.setText("Find all the mines!");
            }}, 750);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 400);

     
        
       
       
       
       
       //boom you failed sound
       
    
}
   
  
   void winScreen(){//outputs win message when win condition is met
       
       //displays new game on the reset button
       btnReset.setText("New Game");
       
        
       //same concept as the loseScreen but with a win message.
       lblMessage.setForeground(new Color(20,200,20));
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("Y");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("Yo");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You");  
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You w");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You wo");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You won");  
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You won!");
         new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You won! !");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You won! ! !");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You won! ! ! !"); 
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        lblMessage.setText("You won! ! ! ! !");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
       lblMessage.setForeground(new Color(0,0,0));
       lblMessage.setText("Find all the mines!");
            }}, 5000);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200);
            }}, 200); 
        
        
        //disables all buttons.
       b0.setEnabled(false); b20.setEnabled(false); b39.setEnabled(false); b59.setEnabled(false); b79.setEnabled(false); b99.setEnabled(false); 
       b1.setEnabled(false); b21.setEnabled(false); b40.setEnabled(false); b60.setEnabled(false); b80.setEnabled(false); 
       b2.setEnabled(false); b22.setEnabled(false); b41.setEnabled(false); b61.setEnabled(false); b81.setEnabled(false); 
       b3.setEnabled(false); b23.setEnabled(false); b42.setEnabled(false); b62.setEnabled(false); b82.setEnabled(false); 
       b4.setEnabled(false); b23.setEnabled(false); b43.setEnabled(false); b63.setEnabled(false); b83.setEnabled(false); 
       b5.setEnabled(false); b24.setEnabled(false); b44.setEnabled(false); b64.setEnabled(false); b84.setEnabled(false); 
       b6.setEnabled(false); b25.setEnabled(false); b45.setEnabled(false); b65.setEnabled(false); b85.setEnabled(false); 
       b7.setEnabled(false); b26.setEnabled(false); b46.setEnabled(false); b66.setEnabled(false); b86.setEnabled(false); 
       b8.setEnabled(false); b27.setEnabled(false); b47.setEnabled(false); b67.setEnabled(false); b87.setEnabled(false); 
       b9.setEnabled(false); b28.setEnabled(false); b48.setEnabled(false); b68.setEnabled(false); b88.setEnabled(false); 
       b10.setEnabled(false); b29.setEnabled(false); b49.setEnabled(false); b69.setEnabled(false); b89.setEnabled(false); 
       b11.setEnabled(false); b30.setEnabled(false); b50.setEnabled(false); b70.setEnabled(false); b90.setEnabled(false); 
       b12.setEnabled(false); b31.setEnabled(false); b51.setEnabled(false); b71.setEnabled(false); b91.setEnabled(false); 
       b13.setEnabled(false); b32.setEnabled(false); b52.setEnabled(false); b72.setEnabled(false); b92.setEnabled(false); 
       b14.setEnabled(false); b33.setEnabled(false); b53.setEnabled(false); b73.setEnabled(false); b93.setEnabled(false); 
       b15.setEnabled(false); b34.setEnabled(false); b54.setEnabled(false); b74.setEnabled(false); b94.setEnabled(false); 
       b16.setEnabled(false); b35.setEnabled(false); b55.setEnabled(false); b75.setEnabled(false); b95.setEnabled(false); 
       b17.setEnabled(false); b36.setEnabled(false); b56.setEnabled(false); b76.setEnabled(false); b96.setEnabled(false); 
       b18.setEnabled(false); b37.setEnabled(false); b57.setEnabled(false); b77.setEnabled(false); b97.setEnabled(false); 
       b19.setEnabled(false); b38.setEnabled(false); b58.setEnabled(false); b78.setEnabled(false); b98.setEnabled(false); 

 

}
   
 

   
   

void reset(){ //this makes the tiles reset in a fancy way
        //using timers to animate the reset.
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
                b0.setBackground(new Color(153,153,153)); 
        b0.setLabel(" ");
        
        b1.setBackground(new Color(153,153,153));
        b1.setLabel(" ");
        
        b2.setBackground(new Color(153,153,153));
        b2.setLabel(" ");
        
        b3.setBackground(new Color(153,153,153));
        b3.setLabel(" ");
        
        b4.setBackground(new Color(153,153,153));
        b4.setLabel(" ");
        
        b5.setBackground(new Color(153,153,153));
        b5.setLabel(" ");
        
        b6.setBackground(new Color(153,153,153));
        b6.setLabel(" ");
        
        b7.setBackground(new Color(153,153,153));
        b7.setLabel(" ");     
        
        b8.setBackground(new Color(153,153,153));
        b8.setLabel(" ");
        
        b9.setBackground(new Color(153,153,153));
        b9.setLabel(" ");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        b10.setBackground(new Color(153,153,153));
        b10.setLabel(" ");
    
        b11.setBackground(new Color(153,153,153));
        b11.setLabel(" ");
        
        b12.setBackground(new Color(153,153,153));
        b12.setLabel(" ");
        
        b13.setBackground(new Color(153,153,153));
        b13.setLabel(" ");
        
        b14.setBackground(new Color(153,153,153));
        b14.setLabel(" ");
        
        b15.setBackground(new Color(153,153,153));
        b15.setLabel(" ");
        
        b16.setBackground(new Color(153,153,153));
        b16.setLabel(" ");
        
        b17.setBackground(new Color(153,153,153));
        b17.setEnabled(true);
        b17.setLabel(" ");     
        
        b18.setBackground(new Color(153,153,153));
        b18.setLabel(" ");
        
        b19.setBackground(new Color(153,153,153));
        b19.setLabel(" ");
        
        b20.setBackground(new Color(153,153,153));
        b20.setLabel(" ");
        
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        b20.setBackground(new Color(153,153,153)); 
        b20.setLabel(" ");
        
        b21.setBackground(new Color(153,153,153));
        b21.setLabel(" ");
        
        b22.setBackground(new Color(153,153,153));
        b22.setLabel(" ");
        
        b23.setBackground(new Color(153,153,153));
        b23.setLabel(" ");
        
        b24.setBackground(new Color(153,153,153));
        b24.setLabel(" ");
        
        b25.setBackground(new Color(153,153,153));
        b25.setLabel(" ");
        
        b26.setBackground(new Color(153,153,153));
        b26.setLabel(" ");
        
        b27.setBackground(new Color(153,153,153));
        b27.setLabel(" ");     
        
        b28.setBackground(new Color(153,153,153));
        b28.setLabel(" ");
        
        b29.setBackground(new Color(153,153,153));
        b29.setLabel(" ");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
                
        b30.setBackground(new Color(153,153,153)); 
        b30.setLabel(" ");
        
        b31.setBackground(new Color(153,153,153));
        b31.setLabel(" ");
        
        b32.setBackground(new Color(153,153,153));
        b32.setLabel(" ");
        
        b33.setBackground(new Color(153,153,153));
        b33.setLabel(" ");
        
        b34.setBackground(new Color(153,153,153));
        b34.setLabel(" ");
        
        b35.setBackground(new Color(153,153,153));
        b35.setLabel(" ");
        
        b36.setBackground(new Color(153,153,153));
        b36.setLabel(" ");
        
        b37.setBackground(new Color(153,153,153));
        b37.setLabel(" ");     
        
        b38.setBackground(new Color(153,153,153));
        b38.setLabel(" ");
        
        b39.setBackground(new Color(153,153,153));
        b39.setLabel(" ");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
                b40.setBackground(new Color(153,153,153)); 
        b40.setLabel(" ");
        
        b41.setBackground(new Color(153,153,153));
        b41.setLabel(" ");
        
        b42.setBackground(new Color(153,153,153));
        b42.setLabel(" ");
        
        b43.setBackground(new Color(153,153,153));
        b43.setLabel(" ");
        
        b44.setBackground(new Color(153,153,153));
        b44.setLabel(" ");
        
        b45.setBackground(new Color(153,153,153));
        b45.setLabel(" ");
        
        b46.setBackground(new Color(153,153,153));
        b46.setLabel(" ");
        
        b47.setBackground(new Color(153,153,153));
        b47.setLabel(" ");     
        
        b48.setBackground(new Color(153,153,153));
        b48.setLabel(" ");
        
        b49.setBackground(new Color(153,153,153));
        b49.setLabel(" ");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
                b50.setBackground(new Color(153,153,153)); 
        b50.setLabel(" ");
        
        b51.setBackground(new Color(153,153,153));
        b51.setLabel(" ");
        
        b52.setBackground(new Color(153,153,153));
        b52.setLabel(" ");
        
        b53.setBackground(new Color(153,153,153));
        b53.setLabel(" ");
        
        b54.setBackground(new Color(153,153,153));
        b54.setLabel(" ");
        
        b55.setBackground(new Color(153,153,153));
        b55.setLabel(" ");
        
        b56.setBackground(new Color(153,153,153));
        b56.setLabel(" ");
        
        b57.setBackground(new Color(153,153,153));
        b57.setLabel(" ");     
        
        b58.setBackground(new Color(153,153,153));
        b58.setLabel(" ");
        
        b59.setBackground(new Color(153,153,153));
        b59.setLabel(" ");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
                b60.setBackground(new Color(153,153,153)); 
        b60.setLabel(" ");
        
        b61.setBackground(new Color(153,153,153));
        b61.setLabel(" ");
        
        b62.setBackground(new Color(153,153,153));
        b62.setLabel(" ");
        
        b63.setBackground(new Color(153,153,153));
        b63.setLabel(" ");
        
        b64.setBackground(new Color(153,153,153));
        b64.setLabel(" ");
        
        b65.setBackground(new Color(153,153,153));
        b65.setLabel(" ");
        
        b66.setBackground(new Color(153,153,153));
        b66.setLabel(" ");
        
        b67.setBackground(new Color(153,153,153));
        b67.setLabel(" ");     
        
        b68.setBackground(new Color(153,153,153));
        b68.setLabel(" ");
        
        b69.setBackground(new Color(153,153,153));
        b69.setLabel(" "); 
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
                b70.setBackground(new Color(153,153,153)); 
        b70.setLabel(" ");
        
        b71.setBackground(new Color(153,153,153));
        b71.setLabel(" ");
        
        b72.setBackground(new Color(153,153,153));
        b72.setLabel(" ");
        
        b73.setBackground(new Color(153,153,153));
        b73.setLabel(" ");
        
        b74.setBackground(new Color(153,153,153));
        b74.setLabel(" ");
        
        b75.setBackground(new Color(153,153,153));
        b75.setLabel(" ");
        
        b76.setBackground(new Color(153,153,153));
        b76.setLabel(" ");
        
        b77.setBackground(new Color(153,153,153));
        b77.setLabel(" ");     
        
        b78.setBackground(new Color(153,153,153));
        b78.setLabel(" ");
        
        b79.setBackground(new Color(153,153,153));
        b79.setLabel(" ");
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
                b80.setBackground(new Color(153,153,153)); 
        b80.setLabel(" ");
        
        b81.setBackground(new Color(153,153,153));
        b81.setLabel(" ");
        
        b82.setBackground(new Color(153,153,153));
        b82.setLabel(" ");
        
        b83.setBackground(new Color(153,153,153));
        b83.setLabel(" ");
        
        b84.setBackground(new Color(153,153,153));
        b84.setLabel(" ");
        
        b85.setBackground(new Color(153,153,153));
        b85.setLabel(" ");
        
        b86.setBackground(new Color(153,153,153));
        b86.setLabel(" ");
        
        b87.setBackground(new Color(153,153,153));
        b87.setLabel(" ");     
        
        b88.setBackground(new Color(153,153,153));
        b88.setLabel(" ");
        
        b89.setBackground(new Color(153,153,153));
        b89.setLabel(" ");
        
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
        b90.setBackground(new Color(153,153,153)); 
        b90.setLabel(" ");
        
        b91.setBackground(new Color(153,153,153));
        b91.setLabel(" ");
        
        b92.setBackground(new Color(153,153,153));
        b92.setLabel(" ");
        
        b93.setBackground(new Color(153,153,153));
        b93.setLabel(" ");
        
        b94.setBackground(new Color(153,153,153));
        b94.setLabel(" ");
        
        b95.setBackground(new Color(153,153,153));
        b95.setLabel(" ");
        
        b96.setBackground(new Color(153,153,153));
        b96.setLabel(" ");
        
        b97.setBackground(new Color(153,153,153));
        b97.setLabel(" ");     
        
        b98.setBackground(new Color(153,153,153));
        b98.setLabel(" ");
        
        b99.setBackground(new Color(153,153,153));
        b99.setLabel(" ");
            }}, 100);
            }}, 100);
            }}, 100);
            }}, 100);
            }}, 100);
            }}, 100);
            }}, 100);
            }}, 100);
            }}, 100);
            }}, 100);

        
        //reenables all the buttons for another board after the animation
        

       b0.setEnabled(true); b20.setEnabled(true); b39.setEnabled(true); b59.setEnabled(true); b79.setEnabled(true); b99.setEnabled(true); 
       b1.setEnabled(true); b21.setEnabled(true); b40.setEnabled(true); b60.setEnabled(true); b80.setEnabled(true); 
       b2.setEnabled(true); b22.setEnabled(true); b41.setEnabled(true); b61.setEnabled(true); b81.setEnabled(true); 
       b3.setEnabled(true); b23.setEnabled(true); b42.setEnabled(true); b62.setEnabled(true); b82.setEnabled(true); 
       b4.setEnabled(true); b23.setEnabled(true); b43.setEnabled(true); b63.setEnabled(true); b83.setEnabled(true); 
       b5.setEnabled(true); b24.setEnabled(true); b44.setEnabled(true); b64.setEnabled(true); b84.setEnabled(true); 
       b6.setEnabled(true); b25.setEnabled(true); b45.setEnabled(true); b65.setEnabled(true); b85.setEnabled(true); 
       b7.setEnabled(true); b26.setEnabled(true); b46.setEnabled(true); b66.setEnabled(true); b86.setEnabled(true); 
       b8.setEnabled(true); b27.setEnabled(true); b47.setEnabled(true); b67.setEnabled(true); b87.setEnabled(true); 
       b9.setEnabled(true); b28.setEnabled(true); b48.setEnabled(true); b68.setEnabled(true); b88.setEnabled(true); 
       b10.setEnabled(true); b29.setEnabled(true); b49.setEnabled(true); b69.setEnabled(true); b89.setEnabled(true); 
       b11.setEnabled(true); b30.setEnabled(true); b50.setEnabled(true); b70.setEnabled(true); b90.setEnabled(true); 
       b12.setEnabled(true); b31.setEnabled(true); b51.setEnabled(true); b71.setEnabled(true); b91.setEnabled(true); 
       b13.setEnabled(true); b32.setEnabled(true); b52.setEnabled(true); b72.setEnabled(true); b92.setEnabled(true); 
       b14.setEnabled(true); b33.setEnabled(true); b53.setEnabled(true); b73.setEnabled(true); b93.setEnabled(true); 
       b15.setEnabled(true); b34.setEnabled(true); b54.setEnabled(true); b74.setEnabled(true); b94.setEnabled(true); 
       b16.setEnabled(true); b35.setEnabled(true); b55.setEnabled(true); b75.setEnabled(true); b95.setEnabled(true); 
       b17.setEnabled(true); b36.setEnabled(true); b56.setEnabled(true); b76.setEnabled(true); b96.setEnabled(true); 
       b18.setEnabled(true); b37.setEnabled(true); b57.setEnabled(true); b77.setEnabled(true); b97.setEnabled(true); 
       b19.setEnabled(true); b38.setEnabled(true); b58.setEnabled(true); b78.setEnabled(true); b98.setEnabled(true); 
       lblMessage.setForeground(new Color(0,0,0));
       lblMessage.setText("Find all the mines!"); //resets the text

        
        
    
}


        
        
}



